generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 Int           @id @default(autoincrement())
  name               String        @map("name")
  email              String        @unique @map("email")
  password           String        @map("password")
  role               String        @default("MEMBER")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  taskHistoryChanges TaskHistory[] @relation("TaskHistoryChangedBy")
  tasks              Task[]        @relation("TaskAssignee")
  teams              TeamMember[]

  @@map("users")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String       @map("name")
  description String?      @map("description")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  tasks       Task[]
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  teamId    Int      @map("team_id")
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String        @map("title")
  description String?       @map("description")
  status      String        @default("PENDING")
  priority    String        @default("MEDIUM")
  assignedTo  Int           @map("assigned_to")
  teamId      Int           @map("team_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deadline    DateTime?     @map("deadline")
  history     TaskHistory[]
  team        Team          @relation(fields: [teamId], references: [id])
  assignee    User          @relation("TaskAssignee", fields: [assignedTo], references: [id])

  @@map("tasks")
}

model TaskHistory {
  id            Int      @id @default(autoincrement())
  taskId        Int      @map("task_id")
  changedBy     Int      @map("changed_by")
  oldStatus     String   @map("old_status")
  newStatus     String   @map("new_status")
  changedAt     DateTime @default(now()) @map("changed_at")
  changedByUser User     @relation("TaskHistoryChangedBy", fields: [changedBy], references: [id], onDelete: Cascade)
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_history")
}
